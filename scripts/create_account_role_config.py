#!/usr/bin/env python3
"""
This creates the config for devs to assume different IAM roles:

*   in the AWS CLI
*   in the Chrome extension we use to switch roles

It assumes each account has a separate folder under the 'accounts' folder
in the root of this repo, and provides config for every role that is
exported by the Terraform.

"""

import json
import os
import re
import subprocess


def git_root():
    output = subprocess.check_output(["git", "rev-parse", "--show-toplevel"])
    return output.decode("utf-8").strip()


def get_iam_role_arns(accounts_dir):
    for entry in sorted(os.listdir(accounts_dir)):
        path = os.path.join(accounts_dir, entry)

        if os.path.isdir(path) and any(f.endswith('.tf') for f in os.listdir(path)):
            subprocess.check_call(["terraform", "init"], cwd=path, stdout=subprocess.DEVNULL)
            outputs = json.loads(
                subprocess.check_output(["terraform", "output", "-json"], cwd=path),
            )

            for op in outputs.values():
                if isinstance(op['value'], str) and op['value'].startswith('arn:aws:iam:') and 'role/' in op['value']:
                    yield op['value']


def create_cli_credentials(*, accounts_dir, roles):
    """
    Create entries for IAM roles in the CLI credential file.

    This is based on the format described in the AWS docs here:
    https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-files.html#cli-configure-files-format

    See the tab labelled "IAM roles".
    """
    credentials_path = os.path.join(accounts_dir, 'credentials.ini')

    with open(credentials_path, 'w') as outfile:
        outfile.write('; This config is autogenerated by scripts/create_account_role_config.py\n')
        outfile.write('; If you want to add new roles to this file, run that script\n')

        for role_arn in roles:
            # e.g. arn:aws:iam::760097843905:role/platform-read_only ~> platform-read_only
            name = role_arn.split('/')[-1]

            # Example config block:
            #
            #     [platform-developer]
            #     role_arn=arn:aws:iam::760097843905:role/platform-developer
            #     source_profile=default
            #     region=eu-west-1
            #
            outfile.write('\n')
            outfile.write(f'[{name}]\n')
            outfile.write(f'role_arn={role_arn}\n')
            outfile.write(f'source_profile=default\n')
            outfile.write(f'region=eu-west-1\n')


def create_chrome_extension_config(*, accounts_dir, roles):
    """
    Create entries for the Chrome extension we use for fast-role switching.
    """
    config_file = os.path.join(accounts_dir, 'chrome_extension_config.ini')

    colors = {
        "catalogue-admin": "FF2200",
        "catalogue-developer": "d98000",
        "catalogue-read_only": "00ff00",
        "data-admin": "960e1e",
        "data-developer": "00d9d9",
        "data-read_only": "d99e0b",
        "digirati-admin": "FF2200",
        "digirati-developer": "d98000",
        "digirati-read_only": "00ff00",
        "digitisation-admin": "960e1e",
        "digitisation-developer": "00d9d9",
        "digitisation-read_only": "d99e0b",
        "experience-admin": "00d9d9",
        "experience-developer": "00d9d9",
        "experience-read_only": "d900cd",
        "platform-admin": "FF2200",
        "platform-developer": "d98000",
        "platform-read_only": "00ff00",
        "reporting-admin": "00d9d9",
        "reporting-dev": "00d9d9",
        "reporting-read_only": "d900cd",
        "storage-admin": "00ff00",
        "storage-developer": "d3ec00",
        "storage-read_only": "d3ec00",
        "wellcometrust-route53": "00d9d9",
        "workflow-admin": "0000ff",
        "workflow-developer": "00ACB6",
        "workflow-read_only": "00ACB6",
        "workflow-support": "00ACB6",

    }

    with open(config_file, 'w') as outfile:
        outfile.write('; This config is autogenerated by scripts/create_account_role_config.py\n')
        outfile.write('; If you want to add new roles to this file, run that script\n')

        for role_arn in roles:
            if role_arn.endswith('-ci'):
                continue

            # e.g. arn:aws:iam::760097843905:role/platform-read_only ~> platform-read_only
            name = role_arn.split('/')[-1]

            # Example config block:
            #
            #     [workflow-developer]
            #     role_arn = arn:aws:iam::299497370133:role/workflow-developer
            #     region = eu-west-1
            #     color = 00ACB6
            #
            outfile.write('\n')
            outfile.write(f'[{name}]\n')
            outfile.write(f'role_arn = {role_arn}\n')
            outfile.write(f'region = eu-west-1\n')

            try:
                role_color = colors[name]
            except KeyError:
                role_color = 'cccccc'

            outfile.write(f'color = {role_color}\n')


if __name__ == '__main__':
    root = git_root()

    accounts_dir = os.path.join(root, "accounts")

    roles = list(get_iam_role_arns(accounts_dir))

    create_cli_credentials(accounts_dir=accounts_dir, roles=roles)
    create_chrome_extension_config(accounts_dir=accounts_dir, roles=roles)
